!(function (e) {
  let t; const c = {}; c.VERSION = '1.6.1'; const o = {}; const n = function (e, n) { return function () { return n.apply(e, arguments); }; }; const r = function () { let e; let n; const t = arguments; const o = t[0]; for (n = 1; n < t.length; n++) for (e in t[n])e in o || !t[n].hasOwnProperty(e) || (o[e] = t[n][e]); return o; }; const i = function (e, n) { return { value: e, name: n }; }; c.TRACE = i(1, 'TRACE'), c.DEBUG = i(2, 'DEBUG'), c.INFO = i(3, 'INFO'), c.TIME = i(4, 'TIME'), c.WARN = i(5, 'WARN'), c.ERROR = i(8, 'ERROR'), c.OFF = i(99, 'OFF'); const l = function (e) { this.context = e, this.setLevel(e.filterLevel), this.log = this.info; }; l.prototype = {
    setLevel(e) { e && 'value' in e && (this.context.filterLevel = e); }, getLevel() { return this.context.filterLevel; }, enabledFor(e) { const n = this.context.filterLevel; return e.value >= n.value; }, trace() { this.invoke(c.TRACE, arguments); }, debug() { this.invoke(c.DEBUG, arguments); }, info() { this.invoke(c.INFO, arguments); }, warn() { this.invoke(c.WARN, arguments); }, error() { this.invoke(c.ERROR, arguments); }, time(e) { typeof e === 'string' && e.length > 0 && this.invoke(c.TIME, [e, 'start']); }, timeEnd(e) { typeof e === 'string' && e.length > 0 && this.invoke(c.TIME, [e, 'end']); }, invoke(e, n) { t && this.enabledFor(e) && t(n, r({ level: e }, this.context)); }
  }; let f; const u = new l({ filterLevel: c.OFF }); (f = c).enabledFor = n(u, u.enabledFor), f.trace = n(u, u.trace), f.debug = n(u, u.debug), f.time = n(u, u.time), f.timeEnd = n(u, u.timeEnd), f.info = n(u, u.info), f.warn = n(u, u.warn), f.error = n(u, u.error), f.log = f.info, c.setHandler = function (e) { t = e; }, c.setLevel = function (e) { for (const n in u.setLevel(e), o)o.hasOwnProperty(n) && o[n].setLevel(e); }, c.getLevel = function () { return u.getLevel(); }, c.get = function (e) { return o[e] || (o[e] = new l(r({ name: e }, u.context))); }, c.createDefaultHandler = function (r) { (r = r || {}).formatter = r.formatter || function (e, n) { n.name && e.unshift('[' + n.name + ']'); }; const i = {}; const l = function (e, n) { Function.prototype.apply.call(e, console, n); }; return typeof console === 'undefined' ? function () {} : function (e, n) { e = Array.prototype.slice.call(e); let t; let o = console.log; n.level === c.TIME ? (t = (n.name ? '[' + n.name + '] ' : '') + e[0], e[1] === 'start' ? console.time ? console.time(t) : i[t] = (new Date()).getTime() : console.timeEnd ? console.timeEnd(t) : l(o, [t + ': ' + ((new Date()).getTime() - i[t]) + 'ms'])) : (n.level === c.WARN && console.warn ? o = console.warn : n.level === c.ERROR && console.error ? o = console.error : n.level === c.INFO && console.info ? o = console.info : n.level === c.DEBUG && console.debug ? o = console.debug : n.level === c.TRACE && console.trace && (o = console.trace), r.formatter(e, n), l(o, e)); }; }, c.useDefaults = function (e) { c.setLevel(e && e.defaultLevel || c.DEBUG), c.setHandler(c.createDefaultHandler(e)); }, c.setDefaults = c.useDefaults, typeof define === 'function' && define.amd ? define(c) : typeof module !== 'undefined' && module.exports ? module.exports = c : (c._prevLogger = e.Logger, c.noConflict = function () { return e.Logger = c._prevLogger, c; }, e.Logger = c);
}(this));
